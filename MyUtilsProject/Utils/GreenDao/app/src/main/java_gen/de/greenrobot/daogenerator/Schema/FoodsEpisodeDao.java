package de.greenrobot.daogenerator.Schema;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.greenrobot.daogenerator.Schema.FoodsEpisode;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FOODS_EPISODE".
*/
public class FoodsEpisodeDao extends AbstractDao<FoodsEpisode, Void> {

    public static final String TABLENAME = "FOODS_EPISODE";

    /**
     * Properties of entity FoodsEpisode.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property FoodId = new Property(0, Integer.class, "foodId", false, "FOOD_ID");
        public final static Property EpisodeId = new Property(1, Integer.class, "episodeId", false, "EPISODE_ID");
    };


    public FoodsEpisodeDao(DaoConfig config) {
        super(config);
    }
    
    public FoodsEpisodeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FOODS_EPISODE\" (" + //
                "\"FOOD_ID\" INTEGER," + // 0: foodId
                "\"EPISODE_ID\" INTEGER);"); // 1: episodeId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FOODS_EPISODE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FoodsEpisode entity) {
        stmt.clearBindings();
 
        Integer foodId = entity.getFoodId();
        if (foodId != null) {
            stmt.bindLong(1, foodId);
        }
 
        Integer episodeId = entity.getEpisodeId();
        if (episodeId != null) {
            stmt.bindLong(2, episodeId);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public FoodsEpisode readEntity(Cursor cursor, int offset) {
        FoodsEpisode entity = new FoodsEpisode( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // foodId
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1) // episodeId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FoodsEpisode entity, int offset) {
        entity.setFoodId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setEpisodeId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(FoodsEpisode entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(FoodsEpisode entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
